import java.lang.Math.*;

class ExpressionTree {
  private String value;
  private ExpressionTree leftChild, rightChild, parent;
  
  ExpressionTree() {
    value = null; 
    leftChild = rightChild = parent = null;
  }
  
  // Constructor
  /* Arguments: String s: Value to be stored in the node
   ExpressionTree l, r, p: the left child, right child, and parent of the node to created      
   Returns: the newly created ExpressionTree               
   */
  ExpressionTree(String s, ExpressionTree l, ExpressionTree r, ExpressionTree p) {
    value = s; 
    leftChild = l; 
    rightChild = r;
    parent = p;
  }
  
  /* Basic access methods */
  String getValue() { return value; }
  
  ExpressionTree getLeftChild() { return leftChild; }
  
  ExpressionTree getRightChild() { return rightChild; }
  
  ExpressionTree getParent() { return parent; }
  
  
  /* Basic setting methods */ 
  void setValue(String o) { value = o; }
  
  // sets the left child of this node to n
  void setLeftChild(ExpressionTree n) { 
    leftChild = n; 
    n.parent = this; 
  }
  
  // sets the right child of this node to n
  void setRightChild(ExpressionTree n) { 
    rightChild = n; 
    n.parent=this; 
  }
  
  
  // Returns the root of the tree describing the expression s
  // Watch out: it makes no validity checks whatsoever!
  ExpressionTree(String s) {
    // check if s contains parentheses. If it doesn't, then it's a leaf
    if (s.indexOf("(")==-1) setValue(s);
    else {  // it's not a leaf
      
      /* break the string into three parts: the operator, the left operand,
       and the right operand. ***/
      setValue( s.substring( 0 , s.indexOf( "(" ) ) );
      // delimit the left operand 2008
      int left = s.indexOf("(")+1;
      int i = left;
      int parCount = 0;
      // find the comma separating the two operands
      while (parCount>=0 && !(s.charAt(i)==',' && parCount==0)) {
        if ( s.charAt(i) == '(' ) parCount++;
        if ( s.charAt(i) == ')' ) parCount--;
        i++;
      }
      int mid=i;
      if (parCount<0) mid--;
      
      // recursively build the left subtree
      setLeftChild(new ExpressionTree(s.substring(left,mid)));
      
      if (parCount==0) {
        // it is a binary operator
        // find the end of the second operand.F13
        while ( ! (s.charAt(i) == ')' && parCount == 0 ) )  {
          if ( s.charAt(i) == '(' ) parCount++;
          if ( s.charAt(i) == ')' ) parCount--;
          i++;
        }
        int right=i;
        setRightChild( new ExpressionTree( s.substring( mid + 1, right)));
      }
    }
  }
  
  
  // Returns a copy of the subtree rooted at this node... 2014
  ExpressionTree deepCopy() {
    ExpressionTree n = new ExpressionTree();
    n.setValue( getValue() );
    if ( getLeftChild()!=null ) n.setLeftChild( getLeftChild().deepCopy() );
    if ( getRightChild()!=null ) n.setRightChild( getRightChild().deepCopy() );
    return n;
  }
  
  // Returns a String describing the subtree rooted at a certain node.
  public String toString() {
    String ret = value;
    if ( getLeftChild() == null ) return ret;
    else ret = ret + "(" + getLeftChild().toString();
    if ( getRightChild() == null ) return ret + ")";
    else ret = ret + "," + getRightChild().toString();
    ret = ret + ")";
    return ret;
  } 
  
  
  //helper method to evaluate an expression
  public static double eval(String exp, double a, double b){
    if (exp.equals("add")){
      return a+b;
    }
    if (exp.equals("minus")){
      return a-b;
    }
    if (exp.equals("mult")){
      return a*b;
    }
    if (exp.equals("minus")){
      return a-b;
    }
    if (exp.equals("div")){
      return a/b;
    }
    if (exp.equals("sin")){
      return Math.sin(a);
    }
    if (exp.equals("cos")){
      return Math.cos(a);
    }
    if (exp.equals("exp")){
      return Math.exp(a);
    }
    else{
      return 0;
    }
  }
  
  
  
  // Returns the value of the expression rooted at a given node
   // when x has a certain value
  //if it's a leaf, then it's either x or a number.
  //if it's not a leaf, it's an operation
  double evaluate(double x) {
    //leaves dont have children
    if(getLeftChild()==null && getRightChild()==null){
      if(getValue().equals("x")){
        return x;
      }
      else{
        return Double.parseDouble(getValue());
      }
    }
    //if it's an operation, operate.
    else{
      //this is for sin, cos, exp
      if(getLeftChild()!=null && getRightChild()==null){
        return eval(getValue(), getLeftChild().evaluate(x), 0);
      }
      else {
        return eval(getValue(), getLeftChild().evaluate(x), getRightChild().evaluate(x));
      }
    }
  }                                                 
  
  /* returns the root of a new expression tree representing the derivative of the
   original expression */
  
  //if it's a tree, its x or a number, so its derivative is 0 or 1
  ExpressionTree differentiate() {
    if(getLeftChild()==null && getRightChild()==null){
      if(getValue().equals("x")){
        return new ExpressionTree("1");
      }
      else{
        return new ExpressionTree("0");
      }
    }
    
    //if its + or -, we differentiate the children normally and evaluate.
    if(getValue().equals("add") || getValue().equals("minus")){
      return new ExpressionTree(getValue(), getLeftChild().differentiate(), getRightChild().differentiate(), getParent());
    }
    
    //if they're multiplied, then (u*v)' = u'*v + u*v'
    if(getValue().equals("mult")){
      ExpressionTree newLeft = new ExpressionTree("mult", getLeftChild().differentiate(), getRightChild().deepCopy(), this);
      ExpressionTree newRight = new ExpressionTree("mult", getLeftChild().deepCopy(), getRightChild().differentiate(), this);
      ExpressionTree newTree = new ExpressionTree("add", newLeft, newRight, getParent());
      return newTree;
    }
    //if exp, return derivative * exp
    
    if(getValue().equals("exp")){
      ExpressionTree newTree = new ExpressionTree("mult", this.deepCopy(), getLeftChild().differentiate(), this.getParent());
      return newTree;
    }
    
     //if sin, return cos
    if (getValue().equals("sin")){
      ExpressionTree newLeft = new ExpressionTree("cos", getLeftChild().deepCopy(),null, this);
      ExpressionTree newRight = getLeftChild().differentiate();
      ExpressionTree newTree = new ExpressionTree("mult", newLeft, newRight, getParent());
      return newTree;
    }
      
     //if cos, return 0-sin
    //so we have one for - and one for sin
    if (getValue().equals("cos")){
      ExpressionTree sinTree = new ExpressionTree("sin", getLeftChild().deepCopy(), null, null);
      ExpressionTree rightTree = new ExpressionTree("mult", sinTree, getLeftChild().differentiate(), null);
      return new ExpressionTree("minus", new ExpressionTree("0",null,null,null), rightTree, this.getParent());
    }
       
    
    // if error                  
    return null;
  }
  
  
  public static void main(String args[]) {
    ExpressionTree e = new ExpressionTree("mult(add(2,x),cos(x))");
    System.out.println(e);
    System.out.println(e.evaluate(1));
    System.out.println(e.differentiate());
    
  }
}
