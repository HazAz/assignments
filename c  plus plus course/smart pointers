//Hazem Abdel Aziz

#include<iostream>
#include<cstdlib>
#include<string>

using namespace std;

//QUESTION 1
//smart pointers are used to ensure that programs dont have memory leaks, resource leaks
//and are except free.
//A smart pointer is not actually a pointer,
//it is a class that wraps a pointer, to manage the lifetime of the object being pointed to. 
//There are 3 different types of smart pointers in the standard library (unique_ptr, shared_ptr, weak_ptr)
//unique_ptr allows exactly one owner of the underlying pointer
//shared_ptr should be used when we want to assign one pointer to multiple owners (like returning a copy of a pointer but keeping the original)
//weak_ptr should be used when we want to observe an object but dont require it to remain alive or remain as it is.

//Here we created the negativeException class that returns the warning
class NegativeException: public exception
{
public:
	virtual const char* what() const throw()
	{
		return "Warning: we don't deal with negative numbers in this class. Variable not assigned.";
	}	
};

//Quetion 2
//template is for Question 4
template <typename T>
class SmartPointer
{
//a smartpointer has a value, 2 constructor,s a destructor and a set and get method
private:
	T* value;
	int size;
	
public:
	//3 constructors, 1 empty, one with value, one with array
	SmartPointer();
	SmartPointer(T x);
	SmartPointer(T x[], int s);
	
	//a destructor
	~SmartPointer();
	
	//2 setValues, one for a value, and one for an array
	void setValue(T x);
	void setValue(T x[], int s);
	
	//a get value that returns value or the first element of the array
	T getValue();
	T getValue(int index);
	
	//T getValue(int s);
	SmartPointer(T x[]);
	
	//overloading operators
	template <typename U>
	friend SmartPointer<U> operator+(const SmartPointer<U>& x, const SmartPointer<U>& y);
	template <typename V>
	friend SmartPointer<V> operator-(const SmartPointer<V>& x, const SmartPointer<V>& y);
	template <typename W>
	friend SmartPointer<W> operator*(const SmartPointer<W>& x, const SmartPointer<W>& y);
};

NegativeException negativeException;

//check if there's space. if there isnt, return an error
//check if it's a negative number, and if so throws the error we created
//else it assigns the value
template<typename T>
SmartPointer<T>::SmartPointer(T x)
{
    try
	{
    	this->value = new T;
    }
	catch(bad_alloc)
	{
   		cout<<"Not enough memory. Could not initialize variable." << endl;
    }
    if(x < 0)
    {
    	throw negativeException;
	}
	*(this->value) = x;	
	this->size = 1;
}


template <typename T>
SmartPointer<T>::SmartPointer(T *x, int s)
{
    try{
    	this->value = new T[s];
	}
	catch(bad_alloc)
	{
		cout<<"Not enough memory. Could not initialize variable." <<endl;
	}	
    for(int i=0; i<s; i++)
    {
    	if(x[i] < 0 ){
    		throw negativeException;
		}
    	*((this->value)+i) = x[i];
	}
	this->size = s;
}

//the destructor
template <typename T>
SmartPointer<T>::~SmartPointer()
{
	if(this!=NULL)
	{
		if(this-> value!=NULL && this->size==1){
			delete this->value;
		}
		//if it's an array, use delete[]
		if(this->value != NULL && this->size > 1){
			delete[] this->value;
		}
	}
}

//second constructor that doenst take an input. if there's not space, throws an error
template <typename T>
SmartPointer<T>::SmartPointer()
{
	try
	{
        this->value = new T;
    }
	catch(bad_alloc)
	{
        cout<<"Not enough memory. Could not initialize variable." << endl;
    }
}
//set method that makes sure the value isnt negative
template <typename T>
void SmartPointer<T>::setValue(T x)
{
	if(x <0)
	{
		throw negativeException;
	}
	*(this->value) = x;
}

//a setValue for the array given a size
template<typename T>
void SmartPointer<T>::setValue(T x[], int s){
	try{
    	this->value = new T[s];
	}
	catch(bad_alloc)
	{
		cout<<"Not enough memory. Could not initialize variable." <<endl;
	}	
    for(int i=0; i<s; i++)
    {
    	if(x[i] < 0 ){
    		throw negativeException;
		}
    	*((this->value)+i) = x[i];
	}
	this->size = s;
}

//a get method that returns the value that we want
template <typename T>
T SmartPointer<T>:: getValue()
{
	return *(this->value);
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//overloading the + operator
template <class T>
SmartPointer<T> operator+(const SmartPointer<T>& x, const SmartPointer<T>& y){
    SmartPointer<T> r;
    r.setValue(*(x.value) + *(y.value));
    return r;
}
//overloading the - operator
template <class T>
SmartPointer<T> operator-(const SmartPointer<T>& x, const SmartPointer<T>& y){
    SmartPointer<T> r;
    r.setValue(*(x.value) - *(y.value));
    return r;
}
//overloading the * operator
template <class T>
SmartPointer<T> operator*(const SmartPointer<T>& x, const SmartPointer<T>& y){
    SmartPointer<T> r;
    r.setValue(*(x.value) * *(y.value));
    return r;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int main()
{
	try{
		
		SmartPointer<float> sPointer;
		sPointer.setValue(11.1);
		SmartPointer<float> sPointer2(14.2);
		cout<< sPointer.getValue()<<endl;
		cout<< sPointer2.getValue()<<endl;
		SmartPointer<float> z = sPointer + sPointer2;
		SmartPointer<float> x = z * sPointer2;
		cout<< z.getValue() <<endl;
		//z = sPointer2 * sPointer;
		cout<< x.getValue()<<endl;
		int array[] = {99,98,97,96};
		SmartPointer<int> h = (*array);
		cout <<h.getValue()<<endl;
	}
	catch(NegativeException &e){
		cout << e.what()<< endl;
	}
}


